# -*- coding: utf-8 -*-
"""pract4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HJimnxa3xsCiPAN_OjMvxUJFu4IE7v8e
"""

import math


# Encryption
def encryptMessage(msg,key):
    cipher = ""

    # track key indices
    k_indx = 0

    msg_len = float(len(msg))
    msg_lst = list(msg)
    key_lst = sorted(list(key))

    # calculate column of the matrix
    col = len(key)

    # calculate maximum row of the matrix
    row = int(math.ceil(msg_len / col))

    # add the padding character '_' in empty
    # the empty cell of the matix
    fill_null = int((row * col) - msg_len)
    msg_lst.extend('_' * fill_null)

    # create Matrix and insert message and
    # padding characters row-wise
    matrix = [msg_lst[i: i + col]
              for i in range(0, len(msg_lst), col)]

    # read matrix column-wise using key
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])
        cipher += ''.join([row[curr_idx]
                          for row in matrix])
        k_indx += 1

    return cipher

# Decryption
def decryptMessage(cipher,key):
    msg = ""

    # track key indices
    k_indx = 0

    # track msg indices
    msg_indx = 0
    msg_len = float(len(cipher))
    msg_lst = list(cipher)

    # calculate column of the matrix
    col = len(key)

    # calculate maximum row of the matrix
    row = int(math.ceil(msg_len / col))

    # convert key into list and sort
    # alphabetically so we can access
    # each character by its alphabetical position.
    key_lst = sorted(list(key))

    # create an empty matrix to
    # store deciphered message
    dec_cipher = []
    for _ in range(row):
        dec_cipher += [[None] * col]

    # Arrange the matrix column wise according
    # to permutation order by adding into new matrix
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])

        for j in range(row):
            dec_cipher[j][curr_idx] = msg_lst[msg_indx]
            msg_indx += 1
        k_indx += 1

    # convert decrypted msg matrix into a string
    try:
        msg = ''.join(sum(dec_cipher, []))
    except TypeError:
        raise TypeError("This program cannot",
                        "handle repeating words.")

    null_count = msg.count('_')

    if null_count > 0:
        return msg[: -null_count]

    return msg

# Driver Code
ch=0
while(ch!=3):
  print("1.encryption\n2.decryption\n3.exit")
  ch=int(input("enter your choice from above:"))
  #encryption
  if ch==1:
    msg=input("enter file name for plain text:")
    try:
      with open(msg, 'r') as file:
        pt = file.read()
        print("File content:",pt)
    except FileNotFoundError:
      print("File not found.")
    print("plain text:",pt)
    key=input("enter key:")
    #key=key_gen(k)
    print("key:",key)
    cipher = encryptMessage(pt,key)
    #print("Encrypted Message: {}".format(cipher))
    #printing encrypted text
    ct=input("enter the file name for cipher text:")
    try:
      with open(ct, 'w') as file:
        content = cipher
        file.write(content)
      print(f"File '{ct}' created and plain text is encrypted successfully.")
    except Exception as e:
      print("An error occurred:", e)
  #decryption
  if ch==2:
    dct=input("enter file name of which decryption is to be done:")
    try:
      with open(dct, 'r') as file:
        cipher_txt = file.read()
        print("File content:",cipher_txt)
    except FileNotFoundError:
      print("File not found.")
    decrypt=decryptMessage(cipher_txt,key)
    #print("Decryped Message: {}".format(decryptMessage(cipher_txt,key)))
    dt=input("enter the file name for decrypted text:")
    try:
      with open(dt, 'w') as file:
        content1 = decrypt
        file.write(content1)
      print(f"File '{dt}' created and plain text is decrypted successfully.")
    except Exception as e:
      print("An error occurred:", e)
  if ch==3:
    print("exit!!")
    exit(0)